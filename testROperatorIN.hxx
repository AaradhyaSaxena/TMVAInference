#ifndef TEST_OPERATOR_IN
#define TEST_OPERATOR_IN

#include "TMVA/RTensor.hxx"
#include "testROperator.hxx"
#include "ROperatorIN.hxx"
#include <sstream>

template<typename T>
bool testROperatorINex1(double tol);

template<typename T>
bool testROperatorIN(double tol) {
   bool failed = false;

   failed |= testROperatorINex1<T>(tol);
   
   return failed;
}


template<typename T>
bool testROperatorINex1(double tol) {
   using namespace TMVA::Experimental;
   using TMVA::Experimental::SOFIE::ROperatorIN;

   // X
   T inputX[120] = {-8.6048585e-01, -9.6416670e-01,  1.2899568e+00, -1.7484370e-01,
       -7.3208332e-01,  7.5057006e-01, -2.1799779e+00,  7.9616255e-01,
       -7.6617163e-01,  1.1127328e-01, -1.0683955e+00,  2.5488231e-01,
       -2.9463929e-01,  2.3392661e+00,  1.2357449e-01,  1.7305301e+00,
       -1.8795127e+00, -1.7330655e+00, -8.2081147e-02, -1.5294507e+00,
        1.6317040e-01,  5.0866789e-01,  3.2843918e-01, -2.7837810e-01,
        3.4187117e-01,  1.5835801e-01,  8.5981238e-01,  7.1624672e-01,
       -4.9951556e-01, -2.1555259e+00, -1.4778305e+00,  1.9200892e+00,
       -2.7605587e-01,  6.6211003e-01,  7.3822677e-01,  9.0019870e-01,
       -8.1708300e-01,  1.2215593e+00, -1.0390218e+00, -5.8793724e-01,
        6.4938205e-01, -5.5637455e-01, -8.0891520e-01,  1.4246467e+00,
        5.1179242e-01, -1.7044162e+00, -5.9274429e-01, -3.4202078e-01,
        1.7660128e-01,  3.3456510e-01,  4.9803472e-01,  1.2901682e+00,
       -1.2192779e+00,  1.9652882e+00,  1.1621652e+00, -1.1847078e+00,
        7.4860848e-02,  4.0124819e-01, -1.2061043e+00, -2.1743095e-03,
        1.9600022e+00, -1.1671326e+00, -5.3288186e-01,  6.7920685e-01,
        8.8600487e-01, -3.8859658e-02,  8.5456020e-01, -7.9670686e-01,
        7.5944901e-01, -3.4467500e-01, -8.4315598e-01,  1.1079718e+00,
       -7.3903435e-01,  4.6923280e-01,  2.8058195e-01,  2.7683525e+00,
       -4.9447231e-02, -7.8312522e-01,  1.0563303e+00, -1.7051044e+00,
       -1.0542516e+00, -9.4976294e-01, -1.0099497e+00, -1.0363532e+00,
        2.6955569e-01, -2.8260273e-01, -1.3713049e+00, -1.8914566e+00,
       -8.6202103e-01, -1.0851582e+00, -2.7797931e-01, -1.8515388e+00,
       -6.2006563e-02,  3.5096303e-02,  5.8213729e-01,  1.4378692e+00,
       -2.0551662e+00,  1.5408451e-02, -6.3411444e-01,  5.7757825e-01,
        1.6693743e+00,  4.7029448e-01, -4.8960495e-01,  1.6743478e+00,
       -1.9064727e+00,  8.3698142e-01,  1.8120750e+00,  2.4063669e-01,
       -2.0203106e+00,  3.4625939e-01, -7.8475475e-01, -8.6921871e-01,
        7.7252686e-01, -4.0186457e-02,  6.3119477e-01, -4.8621446e-01,
        8.6574888e-01,  4.3929321e-01,  6.3502318e-01, -2.4246830e-01};
	RTensor<T> X(inputX, {2, 3, 4, 5});	

   // s
   T inputS[3] = {-0.65821785, -0.7401329 , -2.22978 };
   RTensor<T> s(inputS, {3});

   // bias
   T inputBias[3] = {1.0694432 , 1.8140805 , 0.19001779};
   RTensor<T> bias(inputBias, {3});

   // Y
   T inputY[120] = {-1.4119631 ,  1.4695153 ,  0.21827394,  1.03137   ,  1.3406882 ,
        0.51768214,  2.1444001 ,  0.49237418,  1.3596103 ,  0.87254936,
        1.5273718 ,  0.79283345,  1.0978674 , -0.36418724,  0.8657211 ,
       -0.02628398,  1.9776148 ,  1.8963234 ,  0.9798785 ,  1.7832989 ,
        1.7412841 ,  1.4731512 ,  1.6130227 ,  2.08396   ,  1.6025984 ,
        1.745019  ,  1.2006359 ,  1.3120539 ,  2.25558   ,  3.5407727 ,
        3.0148284 ,  0.37777853,  2.0821579 ,  1.3540683 ,  1.2949958 ,
        1.1692929 ,  2.502037  ,  0.9198921 ,  2.6742787 ,  2.324202  ,
       -1.1961004 ,  1.5628514 ,  2.1407022 , -2.970022  , -0.8812746 ,
        4.189743  ,  1.646071  ,  1.0723779 , -0.11430702, -0.47575197,
       -0.84979486, -2.662315  ,  3.0796735 , -4.207091  , -2.3694248 ,
        3.000572  ,  0.11849031, -0.62833285,  3.0495305 ,  0.2947583 ,
       -0.0080862 ,  1.8967896 ,  1.5104394 ,  0.7721027 ,  0.6461329 ,
        1.2095087 ,  0.66528726,  1.6711469 ,  0.7232236 ,  1.3957943 ,
        1.6994411 ,  0.510923  ,  1.636016  ,  0.9000071 ,  1.0149227 ,
       -0.50048816,  1.215958  ,  1.6628737 ,  0.54238015,  2.2244918 ,
        2.2092266 ,  2.123021  ,  2.1726766 ,  2.1944602 ,  1.1170524 ,
        1.572597  ,  2.4708037 ,  2.899942  ,  2.0506318 ,  2.2347255 ,
        1.5687826 ,  2.8670087 ,  1.3905997 ,  1.3104873 ,  0.85916483,
        0.15316439,  3.0350065 ,  1.3267303 ,  1.862603  ,  0.8629261 ,
       -3.0173993 , -0.43907717,  1.6249472 , -3.0280933 ,  4.6715674 ,
       -1.227546  , -3.3242414 ,  0.05474456,  4.916348  , -0.1723707 ,
        2.259593  ,  2.4412117 , -1.0889524 ,  0.6585847 , -0.78505325,
        1.6176566 , -1.2894032 , -0.3724167 , -0.79328525,  1.0935414}; 
   
   RTensor<T> TrueY(inputY, {2, 3, 4, 5});
   RTensor<T> Y({2, 3, 4, 5});

   ROperatorIN<T> in(1e-2);   /* epsilon */      

   in.Forward_blas(X, s, bias, Y);
   for(int i=0; i<2; i++){
      for(int j=0; j<3; j++){
         for(int k=0; k<4; k++){
            for(int l=0; l<5; l++){
               std::cout<<Y(i,j,k,l)<<" ";
            }
         }
      }
   }
   std::cout<<std::endl;

   bool failed = !IsApprox(Y, TrueY, tol);

   std::stringstream ss;
   ss << "   ";
   ss << "Instance Normalization ex1 : Test ";
   ss << (failed? "Failed" : "Passed" );
   std::cout << ss.str() << std::endl;
   return failed;
}

#endif
