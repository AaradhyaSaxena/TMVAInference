#ifndef TEST_OPERATOR_BN
#define TEST_OPERATOR_BN

#include "TMVA/RTensor.hxx"
#include "testROperator.hxx"
#include "ROperatorBN.hxx"
#include <sstream>

template<typename T>
bool testROperatorBNex1(double tol);

template<typename T>
bool testROperatorBN(double tol) {
   bool failed = false;

   failed |= testROperatorBNex1<T>(tol);
   
   return failed;
}


template<typename T>
bool testROperatorBNex1(double tol) {
   using namespace TMVA::Experimental;
   using TMVA::Experimental::SOFIE::ROperatorBN;

   // X
   T inputX[120] = {-8.00347328e-01,  9.12504137e-01, -3.21601987e+00, -2.00207263e-01,
        5.34889817e-01, -2.71569401e-01, -9.90119517e-01,  9.50701177e-01,
       -5.22644341e-01, -1.53828108e+00, -6.63488030e-01,  1.15021780e-01,
       -9.26951598e-03,  6.11484170e-01, -8.60567987e-01,  4.86453563e-01,
        1.14183044e+00,  7.63909161e-01,  2.13432455e+00,  5.42607784e-01,
       -3.01863819e-01, -7.98083544e-02, -1.31310451e+00, -4.89921629e-01,
       -3.31995040e-01,  3.78859639e-01, -1.47598803e+00,  1.59426153e+00,
       -1.62767684e+00, -7.33081460e-01,  5.31591952e-01,  1.44801378e-01,
       -6.09159648e-01,  7.73335993e-01, -2.39693761e-01, -6.37501299e-01,
        2.31089890e-01, -9.83643949e-01,  1.62772331e-02,  1.54978108e+00,
        6.40143633e-01,  5.91219589e-02, -8.50557029e-01,  4.19071354e-02,
       -4.10941631e-01,  1.66200304e+00,  9.59888220e-01, -1.21232875e-01,
       -4.66467619e-01, -6.12937093e-01, -3.99111122e-01,  4.44628626e-01,
        2.14737248e+00,  1.05060771e-01, -2.33809733e+00,  6.66619658e-01,
       -2.68928170e-01,  8.23687673e-01, -7.24320233e-01, -6.53806984e-01,
        7.71984637e-01, -1.15688717e+00, -2.18484592e+00, -4.21726137e-01,
       -2.29212508e-01, -8.48053157e-01,  3.44389558e-01, -2.65186995e-01,
        1.40885973e+00, -1.40212150e-03, -1.02083778e+00, -8.04522410e-02,
       -8.98243263e-02,  1.86151743e+00,  1.06375885e+00,  1.01962805e-01,
        1.13600600e+00,  4.70182151e-01,  8.60365257e-02,  1.19345045e+00,
       -5.23520410e-01, -2.22815558e-01, -9.43650484e-01,  1.55370384e-01,
        1.50932169e+00,  7.21616626e-01,  3.50609243e-01,  4.71087873e-01,
        5.93953013e-01, -1.19773559e-01,  8.91351819e-01, -1.24907744e+00,
       -1.19341969e+00, -1.48127294e+00,  5.25689609e-02,  1.54027677e+00,
       -7.97177494e-01,  1.08829665e+00, -1.27244920e-01, -1.23956966e+00,
        8.34270120e-01, -1.95147288e+00,  9.26245213e-01,  3.93691868e-01,
        1.20854139e+00, -5.88287473e-01, -3.00785923e+00,  1.46185541e+00,
       -1.01843131e+00, -2.35009402e-01,  1.52210641e+00, -5.81896603e-01,
        6.50252342e-01, -5.71011961e-01, -1.34320331e+00, -6.22834146e-01,
        1.86062217e-01,  7.06187040e-02,  6.83365703e-01, -2.03015938e-01};
	RTensor<T> X(inputX, {2, 3, 4, 5});	

   // s
   T inputS[3] = { 0.12088538, -1.349906  , -0.26711002};
   RTensor<T> s(inputS, {3});

   // bias
   T inputBias[3] = { -0.8487918, -0.6438013, -3.4528515};
   RTensor<T> bias(inputBias, {3});

   // mean
   T inputMean[3] = { -0.25525728,  0.06380508, -0.341007};
   RTensor<T> mean(inputMean, {3});

   // var
   T inputVar[3] = { 0.9206322 , 0.6902492 , 0.36084482};
   RTensor<T> var(inputVar, {3});
   
   // Y
   T inputY[120] = {4.3771896 , -0.3324927 ,  1.5715662 , -0.5970049 , -3.6609962 ,
        3.4988747 , -3.5809906 , -1.167062  ,  0.03097153,  0.3786304 ,
       -0.6540451 , -1.1652412 , -7.8626204 ,  0.13242173, -0.27956116,
       -1.5465727 ,  0.3448025 ,  3.485403  , -2.719793  , -3.7618315 ,
        1.2230313 , -0.07624184, -0.41072732, -1.1726359 ,  2.047378  ,
        4.8368225 ,  0.8916542 , -1.0001261 ,  1.9407102 ,  2.0294673 ,
        2.9335    , -1.9196988 ,  2.0528216 , -2.8627763 ,  0.7048901 ,
        3.0737615 ,  1.4146882 ,  2.3699167 ,  1.9103988 ,  0.10581878,
       -0.7856424 ,  2.2908907 , -0.6257807 ,  0.7036041 ,  1.0779023 ,
       -0.05992294,  0.42451632, -2.2473483 ,  0.844964  , -0.21118703,
       -0.35827842, -1.5016284 ,  0.9333388 , -1.6653854 ,  1.8466262 ,
        0.1043352 ,  1.5277933 , -2.1248436 , -1.3351092 ,  3.0993545 ,
       -4.144512  ,  2.6484404 , -1.2228653 , -3.461314  ,  2.6338181 ,
       -0.15229702, -2.6860025 ,  0.575939  , -1.2526593 ,  2.4649997 ,
       -2.0338647 ,  2.4354205 ,  0.5107952 , -1.0111203 ,  0.76093775,
       -1.8917997 ,  2.6963403 , -1.0727794 , -4.2898693 ,  2.803044  ,
        2.0192616 ,  4.3042793 , -2.7293515 ,  0.22896387, -0.86630666,
       -0.51280075, -0.6519712 , -1.6332494 ,  0.79851264,  3.9079082 ,
        1.78846   , -0.7953538 , -2.552388  , -1.0690722 ,  1.0155604 ,
        0.1048805 , -0.47085327, -1.8875645 ,  1.5788519 ,  3.1476886 ,
        2.2336123 , -2.2852247 ,  0.8282899 ,  1.2672696 , -3.0387857 ,
       -0.01879362,  0.10411417,  1.5911908 ,  0.06210534, -1.1893781 ,
        1.4285864 ,  0.07645282, -0.06249308, -0.13331854,  2.2305691 ,
       -1.8614844 ,  3.1551516 ,  0.6636019 , -1.9039838 , -1.2459824 }; 
   
   RTensor<T> TrueY(inputY, {2, 3, 4, 5});
   RTensor<T> Y({2, 3, 4, 5});

   ROperatorBN<T> bn(  1e-2,      /* epsilon */
                       0.9,       /* momentum */
                       0);        /* training_mode */

   bn.Forward_blas(X, s, bias, mean, var, Y);

   std::size_t size = Y.GetSize();
   const auto &dataY = Y.GetData();
   const auto &dataYt = TrueY.GetData();
   for (std::size_t i=0; i < size; i++){
      std::cout<<static_cast<double>(dataY[i])<<" "<<static_cast<double>(dataYt[i])<<std::endl;
   }

   bool failed = !IsApprox(Y, TrueY, tol);

   std::stringstream ss;
   ss << "   ";
   ss << "Batch Normalization ex1 : Test ";
   ss << (failed? "Failed" : "Passed" );
   std::cout << ss.str() << std::endl;
   return failed;
}

#endif
